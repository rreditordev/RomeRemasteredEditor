using Model;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using Godot;

namespace RtwFileIO
{

	public class StratWriter
	{
		readonly string _filepath;
		readonly Campaign _campaign;
		readonly StringWriter _writer;
	
		public StratWriter (Campaign campaign, string filepath)
		{
			_campaign = campaign;
			_filepath = filepath;
			_writer = new StringWriter();
		}
	
		public bool Write ()
		{
			WriteHeaderComment();
			WriteCampaignHeader();
			WriteLandmarks();
			WriteResources();
			WriteFactions();
			WriteDiplomacy();
			WriteRegionLocations();
            WriteScripts();
			File.WriteAllText(Path.Combine(_filepath, "descr_strat.txt"), _writer.ToString());
			return true;
		}

		void WriteHeaderComment ()
		{
			// The rtw engine literally needs the descr_strat file to start with a comment or else it treats the campaign as invalid, WOW.
			_writer.WriteLine($"{Keywords.Comment} This file was generated by RREditor.");
			_writer.WriteLine();
			_writer.WriteLine(CommentOrganizersStrat.HeaderComments);
			_writer.WriteLine();
			}

		void WriteCampaignHeader ()
		{
			CampaignHeader header = _campaign.Header;
			_writer.WriteLine($"{Keywords.Campaign}\t{header.Name}");
			_writer.WriteLine($"{Keywords.Options} {header.Option}"); // The separator here NEEDS to be a space
		
			_writer.WriteLine(Keywords.Playable);
			IReadOnlyList<string> playableFactions = header.GetPlayableFactions();
			foreach (string playableFaction in playableFactions)
			{
				_writer.WriteLine($"\t{playableFaction}");
			}
			_writer.WriteLine(Keywords.End);
		
			_writer.WriteLine($"{Keywords.Unlockable}");
			IReadOnlyList<string> unlockableFactions = header.GetUnlockableFactions();
			foreach (string unlockableFaction in unlockableFactions)
			{
				_writer.WriteLine($"\t{unlockableFaction}");
			}
			_writer.WriteLine(Keywords.End);
		
			_writer.WriteLine($"{Keywords.NonPlayable}");
			IReadOnlyList<string> nonPlayableFactions = header.GetNonPlayableFactions();
			foreach (string nonPlayableFaction in nonPlayableFactions)
			{
				_writer.WriteLine($"\t{nonPlayableFaction}");
			}
			_writer.WriteLine(Keywords.End);
		
			_writer.WriteLine($"{Keywords.StartDate}\t{header.StartYear} {header.StartSeason.ToRtwString()}");
			_writer.WriteLine($"{Keywords.EndDate}\t{header.EndYear} {header.EndSeason.ToRtwString()}");
		
			_writer.WriteLine($"{Keywords.BrigandSpawn}\t{header.BrigandSpawnValue}");
			_writer.WriteLine($"{Keywords.PirateSpawn}\t{header.PirateSpawnValue}");
			_writer.WriteLine();
		}

		void WriteLandmarks ()
		{
            _writer.WriteLine();
            _writer.WriteLine(CommentOrganizersStrat.landmarkComments);
            _writer.WriteLine();
			IReadOnlyList<Landmark> landmarks = _campaign.GetLandmarks();
			for (var i = 0; i < landmarks.Count; i++)
			{
				Landmark landmark = landmarks[i];
				_writer.WriteLine($"{Keywords.Landmark}\t{landmark.ID}\t{landmark.MapPosition.X}, {landmark.MapPosition.Y}");
			}
			_writer.WriteLine();
		}

		void WriteResources ()
		{
			_writer.WriteLine();
            _writer.WriteLine(CommentOrganizersStrat.resourceComments);
            _writer.WriteLine();
            IReadOnlyList<Model.Resource> resources = _campaign.GetResources().OrderBy(x => x.ResourceID).ToArray();
			for (var i = 0; i < resources.Count; i++)
			{
				Model.Resource resource = resources[i];
				string resourceSpace = "\t\t\t\t\t\t";
                if (resource.ResourceID.Length > 6) {
					resourceSpace = "\t\t\t\t\t";
                }

                string xPosSpace = "\t\t";
                if (resource.MapPosition.X.ToString().Length > 3) {
					xPosSpace = "\t";
				}

				_writer.WriteLine($"{Keywords.Resource}\t\t{resource.ResourceID},{resourceSpace}{resource.AbundanceLevel},\t   \t   {resource.MapPosition.X},{xPosSpace}" +
								$"{resource.MapPosition.Y}\t\t{Keywords.Comment} {resource.RegionTag}");
			}
			_writer.WriteLine();
		}

		void WriteFactions ()
		{

			_writer.WriteLine();
			_writer.WriteLine(CommentOrganizersStrat.soundEmittersComments);
			_writer.WriteLine();
            _writer.WriteLine(CommentOrganizersStrat.eventsComments);
            _writer.WriteLine();
            _writer.WriteLine(CommentOrganizersStrat.factionComments);
            _writer.WriteLine();
            IReadOnlyList<Faction> factions = _campaign.GetFactions();
			for (var i = 0; i < factions.Count; i++)
			{
				Faction faction = factions[i];
				_writer.WriteLine($"{Keywords.Faction}\t{faction.FactionID}, {faction.AIPersonality}");
			
				// Ai do not attack faction entries
				List<string> aiDoNotAttackFactions = faction.GetAiDoNotAttackFactions();
				int numDoNotAttackFactions = aiDoNotAttackFactions.Count;
				if (numDoNotAttackFactions > 0)
				{
					var factionsList = "";
					for (var j = 0; j < numDoNotAttackFactions; j++)
					{
						string curFaction = aiDoNotAttackFactions[j];
						factionsList += j < numDoNotAttackFactions - 1 ? curFaction + ", " : curFaction;
					}
					_writer.WriteLine($"{Keywords.AiDoNotAttack} {factionsList}");
				}
				// If faction is emergent flag it to engine
				if (faction.IsEmergent)
				{
					_writer.WriteLine(Keywords.EmergentFaction);
				}
				// Starting denarii
				_writer.WriteLine($"{Keywords.Denari}\t{faction.StartingMoney}");
			
				WriteSettlements(faction.GetSettlements());
				WriteCharacters(faction.GetCharacters());
				WriteCharacterRecords(faction.FamilyTrees.GetStratCharacterRecords());
				WriteRelatives(faction.FamilyTrees.GetStratRelativeInfo());
			
				_writer.WriteLine();
			}
		}

		void WriteSettlements (IReadOnlyList<Settlement> settlements)
		{
			for (var i = 0; i < settlements.Count; i++)
			{
				Settlement settlement = settlements[i];
				_writer.WriteLine(Keywords.Settlement);
				_writer.WriteLine(Keywords.StructStart);
			
				_writer.WriteLine($"\t{Keywords.Level} {settlement.Level.ToRtwString()}");
				_writer.WriteLine($"\t{Keywords.Region} {settlement.RegionID}");
				_writer.WriteLine();
				_writer.WriteLine($"\t{Keywords.YearFounded} 0");
				_writer.WriteLine($"\t{Keywords.Population} {settlement.StartingPopulation}");
				_writer.WriteLine($"\t{Keywords.SettlementTax} 51");
				_writer.WriteLine($"\t{Keywords.PlanSet} {settlement.PlanSetName}");
				_writer.WriteLine($"\t{Keywords.FactionCreator} {settlement.FactionCreatorID}");
			
				// Buildings
				IReadOnlyList<Building> buildings = settlement.GetBuildings();
				for (var j = 0; j < buildings.Count; j++)
				{
					Building building = buildings[j];
					_writer.WriteLine($"\t{Keywords.Building}\n\t{Keywords.StructStart}");
					_writer.WriteLine($"\t\t{Keywords.BuildingType} {building.BuildingTreeID} {building.BuildingLevelID}");
					_writer.WriteLine($"\t{Keywords.StructEnd}");
				}
				
				_writer.WriteLine(Keywords.StructEnd);
			}
			_writer.WriteLine();
		}

		void WriteCharacters (IReadOnlyList<Character> characters)
		{
			for (var i = 0; i < characters.Count; i++)
			{
				Character character = characters[i];
                // Initial character declaration
                _writer.WriteLine(characters[i].Comments);
                _writer.Write($"{Keywords.Character}\t");

				if (character is SlaveLeader slaveLeader)
				{
					_writer.Write($"{Keywords.SubFaction} {slaveLeader.SubFactionID}, ");
				}

				_writer.Write($"{character.Name}, {character.Type.ToRtwString()}, ");

				if (character is Noble noble && noble.NobleRank != Noble.Rank.None)
				{
					_writer.Write($"{noble.NobleRank.ToRtwString()}, ");
				}

                if (character.Type == CharacterType.NamedCharacter || character.Type == CharacterType.Admiral || character.Type == CharacterType.General)
                    _writer.Write($"command {character.Command}, influence {character.Influence}, management {character.Management}, subterfuge {character.Subterfuge}, ");

                    _writer.WriteLine($"{Keywords.Age} {character.Age}, , {Keywords.XCoord} {character.MapPosition.X}, {Keywords.YCoord} {character.MapPosition.Y}");

				if (character is Notable notable)
				{
					// Traits
					WriteTraitList(notable.TraitList);
					// Ancillaries
					List<string> ancillaries = notable.AncillariesList.GetAncillaries();
					int numAncillaries = ancillaries.Count;
					if (numAncillaries > 0)
					{
						var ancillariesString = "";
						for (var j = 0; j < numAncillaries; j++)
						{
							string ancillary = ancillaries[j];
							ancillariesString += j < numAncillaries - 1 ? ancillary + ", " : ancillary;
						}
						_writer.WriteLine($"{Keywords.Ancillaries} {ancillariesString}");
					}
				}

				if (character is IArmyLeader armyLeader) // Both Nobles and Captains
				{
					_writer.WriteLine(Keywords.Army);
					List<Unit> units = armyLeader.LeadingArmy.GetUnits();
					for (var j = 0; j < units.Count; j++)
					{
						Unit unit = units[j];
						_writer.WriteLine($"{Keywords.Unit}\t{unit.UnitID}\t{Keywords.Experience} {unit.Experience} {Keywords.Armour} {unit.ArmourLevel} " +
										$"{Keywords.WeaponLevel} {unit.WeaponLevel}");
					}
				}
			
				_writer.WriteLine();
			}
		}

		void WriteTraitList (TraitList charTraitList)
		{
			List<Trait> traits = charTraitList.GetTraits();
			if (traits.Count == 0) return;
			var traitString = "";
			int traitCount = traits.Count;
			for (var i = 0; i < traits.Count; i++)
			{
				Trait trait = traits[i];
				traitString += trait.Level > 0 ? $"{trait.ID} {trait.Level}" : trait.ID;
				traitCount--;
				if (traitCount > 0) traitString += ", ";
			}
			_writer.WriteLine($"{Keywords.Traits} {traitString}");
		}

		void WriteCharacterRecords (IReadOnlyList<CharacterRecord> records)
		{
			for (var i = 0; i < records.Count; i++)
			{
				CharacterRecord record = records[i];
				_writer.Write($"{Keywords.CharacterRecord}\t{record.Name}, {record.Gender}, {Keywords.Command} 0, {Keywords.Influence} 0, " +
							$"{Keywords.Management} 0, {Keywords.Subterfuge} 0, {Keywords.Age} {record.Age}, {record.IsAlive}");
			
				if (record.IsAlive is Keywords.Dead)
				{
					if (record.DeathRelativeToStart > 0)
					{
						_writer.Write($" {record.DeathRelativeToStart}");
					}
					_writer.WriteLine($", {record.IsPastLeader}");
				}
				else
				{
					_writer.WriteLine();	
				}

				WriteTraitList(new TraitList(record.Traits));
			}
		
			if (records.Count > 0) _writer.WriteLine();
		}
	
		void WriteRelatives (IReadOnlyList<RelativeInfo> relatives)
		{
			for (var i = 0; i < relatives.Count; i++)
			{
				RelativeInfo relative = relatives[i];
				_writer.Write($"{Keywords.Relative}\t{relative.Name}, {relative.WifeName}, ");
				foreach (string child in relative.OffspringNames)
				{
					_writer.Write($"{child}, ");
				}
				_writer.WriteLine(Keywords.End);
			}
		}

		void WriteDiplomacy ()
		{
            _writer.WriteLine();
            _writer.WriteLine(CommentOrganizersStrat.diplomacyComments);
            _writer.WriteLine();
            List<DiplomacyInfo> coreAttitudes = _campaign.Diplomacy.GetCoreAttitudes().OrderBy(x => x.FactionSource).ToList();
			string newName = "";
			for (var i = 0; i < coreAttitudes.Count; i++)
			{
				if(newName == "") {
					newName = coreAttitudes[i].FactionSource;
				}else if(newName != coreAttitudes[i].FactionSource) {
                    _writer.WriteLine(Keywords.Comment);
					newName = coreAttitudes[i].FactionSource;
                }
				WriteDiplomaticInfo(Keywords.CoreAttitudes, coreAttitudes[i]);
			}
			_writer.WriteLine();
		
			List<DiplomacyInfo> relationships = _campaign.Diplomacy.GetRelationships().OrderBy(x => x.FactionSource).ToList();
			for (var i = 0; i < relationships.Count; i++)
			{
				if(i > coreAttitudes.Count-1) {
					continue;
					//GD.Print($"i: {i} coreAttitudes: {coreAttitudes.Count-1} ");
				}
                if (newName == "") {
                    newName = coreAttitudes[i].FactionSource;
                } else if (newName != coreAttitudes[i].FactionSource) {
                    _writer.WriteLine(Keywords.Comment);
                    newName = coreAttitudes[i].FactionSource;
                }
                WriteDiplomaticInfo(Keywords.FactionRelationships, relationships[i]);
			}
			_writer.WriteLine();
		
			List<DiplomacyInfo> aggressions = _campaign.Diplomacy.GetAggressions().OrderBy(x => x.FactionSource).ToList();
			for (var i = 0; i < aggressions.Count; i++)
			{
                if (newName == "") {
                    newName = coreAttitudes[i].FactionSource;
                } else if (newName != coreAttitudes[i].FactionSource) {
                    _writer.WriteLine(Keywords.Comment);
                    newName = coreAttitudes[i].FactionSource;
                }
                WriteDiplomaticInfo(Keywords.FactionAggression, aggressions[i]);
			}
			_writer.WriteLine();
		}
	
		void WriteDiplomaticInfo (string keyword, DiplomacyInfo info)
		{
			string tabs = "\t\t\t";
            if (info.FactionSource.Length > 6) {
				tabs = "\t\t";
			}else if (info.FactionSource.Length > 10) {
                tabs = "";
            }
            _writer.Write($"{keyword}\t{info.FactionSource},{tabs}{info.DiplomaticValue}\t\t");
			int numTargets = info.FactionTargets.Count;
			for (var i = 0; i < numTargets; i++)
			{
				string target = i < numTargets - 1 ? info.FactionTargets[i] + ", " : info.FactionTargets[i];
				_writer.Write(target);
			}
			_writer.WriteLine();
		}

        void WriteRegionLocations() {
            _writer.WriteLine();
            _writer.WriteLine(CommentOrganizersStrat.regionsSection);
            _writer.WriteLine();
            List<RegionLocation> regionLocs = _campaign.GetRegionLocations();
            for (var i = 0; i < regionLocs.Count; i++) {
				_writer.WriteLine(regionLocs[i].Comments);
                _writer.WriteLine($"region {regionLocs[i].RegionName}");
				_writer.WriteLine($"{regionLocs[i].ObjectType} {regionLocs[i].MapPosition.X} {regionLocs[i].MapPosition.Y}");
            }
            _writer.WriteLine();

        }

        void WriteScripts ()
		{
            _writer.WriteLine();
            _writer.WriteLine(CommentOrganizersStrat.spawnScriptsSection);
            List<SpawnScriptInfo> spawnScripts = _campaign.Scripts.GetSpawnScripts();
			for (var i = 0; i < spawnScripts.Count; i++)
			{
				SpawnScriptInfo spawnScript = spawnScripts[i];
				_writer.WriteLine($"{Keywords.SpawnScript}\t{spawnScript.Faction}, {spawnScript.Event}, {spawnScript.ScriptPath}");
			}
			_writer.WriteLine();
            _writer.WriteLine(CommentOrganizersStrat.scriptsSection);
            _writer.WriteLine();
            _writer.WriteLine(Keywords.Script);
			List<ScriptInfo> scripts = _campaign.Scripts.GetScripts();
			for (var i = 0; i < scripts.Count; i++)
			{
				ScriptInfo script = scripts[i];
				_writer.Write($"{script.ScriptPath}");
				string last = ! string.IsNullOrEmpty(script.Options) ? $", {script.Options}" : "";
				_writer.WriteLine(last);
			}
		}

	}

}